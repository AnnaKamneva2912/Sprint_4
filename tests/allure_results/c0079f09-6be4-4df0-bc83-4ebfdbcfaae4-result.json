{"name": "test_question_live_behind_MKAD", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <question_tests.TestQuestionPart object at 0x000000099AFCDED0>\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"4ad291b3-6bbb-4994-9eb3-5c247874fe75\")>\n\n    def test_question_live_behind_MKAD(self, driver):\n        driver.get('https://qa-scooter.praktikum-services.ru/')\n        question_live_behind_MKAD = QuestionPartPage(driver)\n        question_live_behind_MKAD.scroll_to_question_live_behind_MKAD()\n        question_live_behind_MKAD.click_question_live_behind_MKAD()\n>       WebDriverWait(driver, 3).until(expected_conditions.visibility_of_element_located(QuestionPartLocators.answer_live_behind_MKAD))\n\nquestion_tests.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4ad291b3-6bbb-4994-9eb3-5c247874fe75\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000000099B06EA20>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\python\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException"}, "start": 1673641445675, "stop": 1673641450347, "uuid": "2b8ba045-4ccc-4318-b211-b2ed118a9b68", "historyId": "4fc8b2fdbec7332f381b1594e0f66762", "testCaseId": "a5287014ea36394cb3c174375809cd96", "fullName": "question_tests.TestQuestionPart#test_question_live_behind_MKAD", "labels": [{"name": "suite", "value": "question_tests"}, {"name": "subSuite", "value": "TestQuestionPart"}, {"name": "host", "value": "Lenovo-PC"}, {"name": "thread", "value": "9360-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "question_tests"}]}